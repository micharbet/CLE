#
## ** cle-power: powerprompt-like **
#
#* version: 2021-11-17
#* author:  Michael Arbet (marbet@redhat.com)
#* home:    https://github.com/micharbet/CLE
#* license: GNU GPL v2
#* Copyright (C) 2021 by Michael Arbet 
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# ALL STILL VERY EXPERIMENTAL

# function to grab RGB values of background
getbg () {
	local OLDSTTY=$(stty -g)
	stty raw -echo min 0
	echo -en "\e]11;?\e\\" >/dev/tty
	read -t 0.1 -r -d '\' </dev/tty
	stty $OLDSTTY
	#_clevdump REPLY
	R1=`sed 's/^.*\;//;s/[^rgb:0-9a-f/]//g' <<<$REPLY`
	R2=`sed 's;.\+rgb:\(..\)../\(..\)../\(..\)...\+;\1 \2 \3;' <<<$REPLY`
	#_clevdump R1
	#_clevdump R2
	read R G B <<<$R2
}

# get background RGB values
getbg
echo RGB: $R $G $B

# ensure decent shades even on black background
if [ $R$G$B = "000000" ]; then
	R=10
	G=10
	B=10
fi

# identify dark/light background and adjust shade cofficients
if [ $((0x$G)) -lt 128 ]; then
	X0=90
	X1=120
	X2=140
	X3=160
	X4=250
else
	X0=120
	X1=90
	X2=80
	X3=70
	X4=40
fi

# calculate power-shades
R0=$((0x$R*$X0/100))
G0=$((0x$G*$X0/100))
B0=$((0x$B*$X0/100))

R1=$((0x$R*$X1/100))
G1=$((0x$G*$X1/100))
B1=$((0x$B*$X1/100))

R2=$((0x$R*$X2/100))
G2=$((0x$G*$X2/100))
B2=$((0x$B*$X2/100))

R3=$((0x$R*$X3/100))
G3=$((0x$G*$X3/100))
B3=$((0x$B*$X3/100))

R4=$((0x$R*$X4/100))
G4=$((0x$G*$X4/100))
B4=$((0x$B*$X4/100))


# complete RGB sequences
P0="$R0;$G0;$B0"
P1="$R1;$G1;$B1"
P2="$R2;$G2;$B2"
P3="$R3;$G3;$B3"
P4="$R4;$G4;$B4"

#echo $P0
#echo $P1
#echo $P2
#echo $P3
#echo $P4

# backgrounds ANSI ESC's
PB0=$'\e[48;2;'$P0'm'
PB1=$'\e[48;2;'$P1'm'
PB2=$'\e[48;2;'$P2'm'
PB3=$'\e[48;2;'$P3'm'
PB4=$'\e[48;2;'$P4'm'

# foregrounds ANSI ESC's
PF0=$'\e[38;2;'$P0'm'
PF1=$'\e[38;2;'$P1'm'
PF2=$'\e[38;2;'$P2'm'
PF3=$'\e[38;2;'$P3'm'
PF4=$'\e[38;2;'$P4'm'

_Cn=$_PB0
_Ce=$_CR	#error highligt without reverse
_Cp=$'\E[37;40m' # prompt ending

# Cut and remmeber starting newline
NL0=
if [[ $CLE_P0 =~ ^\\n ]]; then
	#CLE_P0=${CLE_P0/\\n/}
	NL0='\n'
fi

# Power-enhance PS1
PS1="\\[$PB0"$'\e[30m'"\\]^C0$CLE_P0^CN"
PS1=$PS1"\\[$PF0$PB1\\] ^C1$CLE_P1^CN"
PS1=$PS1"\\[$PF1$PB2\\] ^C2$CLE_P2^CN"
PS1=$PS1"\\[$PF2$PB3\\] ^C3$CLE_P3^CN"
PS1=$PS1"\\[$PF3$PB4\\]^CW^CN\\[$PF4\\]^CN^C4 "

# replace newlines; remove \$
PS1=$(sed -e 's/\\n//g' -e 's/\\\$//' <<<$PS1)

# or leave them ?
#PS1=$(sed -e 's/\\n/ ^Cn^Cp^CN\n^Cn/g' -e 's/\\\$//' <<<$PS1)
#PS1=$(sed -e 's/\\n/ ^CN\n/g' -e 's/\\\$//' <<<$PS1)

#_clevdump PS1
#PS1=$(_clesc "$NL0$PS1") 
PS1=$(_clesc "$PS1") 
#_clevdump PS1

