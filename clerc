#!/bin/sh
##
## ** CLE : Command Live Environment **
##
#* author:  Michael Arbet (marbet@redhat.com)
#* home:    https://github.com/micharbet/CLE
#* version: 2021-04-28 (Aquarius)
#* license: GNU GPL v2
#* Copyright (C) 2016-2021 by Michael Arbet

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# CLE provides:
# -improved look&feel: responsive colorful prompt, highlighted exit code
# -persistent alias store - command 'aa'
# -rich history - commands 'h' and 'hh'
# -seamless remote CLE session, with no installation - use 'lssh' instead 'ssh'
# -local live session - lsu/lsudo (su/sudo wrappers)
# -setup from command line, eg. 'cle color RGB'
# -find more using 'cle help' and 'cle doc'
#
# Quick setup:
# 1. Download and execute this file within your shell session
# 2. Integrate it into your profile:
#	$ . clerc
#	$ cle deploy
# 3. Enjoy!


# Check if the shell is interactive and CLE not yet started
[ -t 0 -a -z "$CLE_EXE" ] || return

# Now it really starts, warning: magic inside!


# Startup sequence
export CLE_RC
_C=$SHELL:$BASH:$ZSH_NAME:$0
_T=/var/tmp/$USER
case  $_C in
*zsh::*zsh:*/rc*) # started FROM .zshrc
	CLE_RC=$0
	;;
*clerc*|*:*/rc*) # executed as a command from .cle directory
	CLE_RC=$(cd `dirname $0`;pwd;)/$(basename $0) # full path to this file
	SH=$SHELL
	while [ $1 ]; do
		case $1 in
		-b*)	SH=`which bash`		# force bash
			export CLE_ARG='-b'
			;;
		-z*)	SH=`which zsh 2>/dev/null || which bash` # try zsh
			export CLE_ARG='-z'
			;;
		-m)	CLE_MOTD=`uptime`
			export CLE_MOTD
			;;
		*)	echo "$0: unknown option '$1'"; exit 1;;
		esac
		shift
	done
	export CLE_PROF=1
	case $SH in
	*zsh)
		export ZDOTDIR=$_T
		mkdir -p $ZDOTDIR
		ln -sf $CLE_RC $ZDOTDIR/.zshrc
		exec zsh
		;;
	*)
		exec bash --rcfile $0
		;;
	esac
	;;
*bash:*bash) # bash session resource
	CLE_RC=$BASH_SOURCE
	;;
*zsh:*zsh) # zsh session resource (started AS TEMPORARY .zshrc)
	unset ZDOTDIR
	;;
*)	echo "CLE startup failed: 'case $_C'";;
esac


# Use alias built-ins for startup
unset -f alias unalias 2>/dev/null
unalias aa h hh .. ... 2>/dev/null

# Variables init

# First run code
if [[ $CLE_RC =~ clerc ]]; then
	CLE_DR=$HOME/.cle-`whoami`
	mkdir -m 755 -p $CLE_DR
	CLE_1=$CLE_DR/rc1
	cp $CLE_RC $CLE_1
	chmod 755 $CLE_1
	CLE_RC=$CLE_1
fi

# CLE_RC can be relative path, make it full
CLE_DR=$(cd `dirname $CLE_RC`;pwd;)
CLE_RC=$CLE_DR/`basename $CLE_RC`

# FQDN hack
CLE_FHN=$HOSTNAME
_N=`hostname`
[ ${#CLE_FHN} -lt ${#_N} ] && CLE_FHN=$_N
CLE_SHN=`sed 's:\.[^.]*\.[^.]*$::' <<<$CLE_FHN`

CLE_IP=${CLE_IP:-`cut -d' ' -f3 <<<$SSH_CONNECTION`}

# where in the deep space CLE grows
CLE_VER=`sed -n 's/^#\* version: //p' $CLE_RC`
CLE_REL=`sed -n 's/.*(\(.*\)).*/\1/p' <<<$CLE_VER`
CLE_REL=dev					# REMOVE THIS ON RELEASE!!!!!
CLE_SRC=https://raw.githubusercontent.com/micharbet/CLE/$CLE_REL

# current shell
CLE_SH=`basename $BASH$ZSH_NAME`

# find writable folder
_H=$HOME
[ -w $_H ] || _H=$_T
[ -r $HOME ] || HOME=$_H
[ $PWD = $_T ] && cd
CLE_D=$_H/`sed 's:/.*/\(\..*\)/.*:\1:' <<<$CLE_RC`
mkdir -m 755 -p $CLE_D

# config, tweak, etc...
CLE_CF=$CLE_D/cf-$CLE_FHN
CLE_AL=$CLE_D/al
CLE_HIST=$_H/.clehistory
_N=`sed 's:.*/rc1*::' <<<$CLE_RC`
CLE_WS=${_N/-/}
CLE_TW=$CLE_DR/tw$_N
CLE_ENV=$CLE_DR/env$_N
CLE_TTY=`tty|tr -d '/dev'`
CLE_XFUN=
PROMPT_DIRTRIM=3

# who I am
_N=`sed -n 's;.*cle-\(.*\)/.*;\1;p' <<<$CLE_RC`
export CLE_USER=${CLE_USER:-${_N:-$(whoami)}}

# Internal functions

_clebnr () {
cat <<EOT

$_CC   ___| |     ____| $_CN Command Live Environment activated
$_CB  |     |     __|   $_CN ...bit of life to the command line
$_Cb  |     |     |     $_CN Learn more:$_CL cle help$_CN and$_CL cle doc$_CN
$_Cb$_CD \____|_____|_____| $_CN Uncover the magic:$_CL less $CLE_RC$_CN

EOT
}

# boldprint
printb () { printf "$_CL$*$_CN\n";}

# simple question
ask () (
	PR="$_CL$* (y/N) $_CN"
	[ $ZSH_NAME ] && read -ks "?$PR" || read -n 1 -s -p "$PR"
	echo ${REPLY:=n}
	[ "$REPLY" = "y" ]
)

# execute script and log its filename into CLE_EXE
# also ensure the script will be executed only once
_clexe () {
	[ -f "$1" ] || return 1
	[[ $CLE_EXE =~ :$1[:$] ]] && return
	CLE_EXE=$CLE_EXE:$1
	source $1
}
CLE_EXE=$CLE_RC

# Create color table
_cletable () {
	_C_=$TERM
	_CN=`tput sgr0`
	_CL=`tput bold`
	_CU=`tput smul`;_Cu=`tput rmul`
	_CV=`tput rev`
	_CI=`tput sitm`;_Ci=`tput ritm`
	_CD=`tput dim`
	_Ck=$_CN$(tput setaf 0)
	_Cr=$_CN$(tput setaf 1)
	_Cg=$_CN$(tput setaf 2)
	_Cy=$_CN$(tput setaf 3)
	_Cb=$_CN$(tput setaf 4)
	_Cm=$_CN$(tput setaf 5)
	_Cc=$_CN$(tput setaf 6)
	_Cw=$_CN$(tput setaf 7)
	case `tput colors` in
	8)
		_CK=$_Ck$_CL
		_CR=$_Cr$_CL
		_CG=$_Cg$_CL
		_CY=$_Cy$_CL
		_CB=$_Cb$_CL
		_CM=$_Cm$_CL
		_CC=$_Cc$_CL
		_CW=$_Cw$_CL
		;;
	*)
		_CK=$_CN$(tput setaf 8)$_CL
		_CR=$_CN$(tput setaf 9)$_CL
		_CG=$_CN$(tput setaf 10)$_CL
		_CY=$_CN$(tput setaf 11)$_CL
		_CB=$_CN$(tput setaf 12)$_CL
		_CM=$_CN$(tput setaf 13)$_CL
		_CC=$_CN$(tput setaf 14)$_CL
		_CW=$_CN$(tput setaf 15)$_CL
		;;
	esac
	_Ce=$_CR$_CL$_CV # err highlight
}

# set prompt colors
_cleclr () {
	local C I CI
	case "$1" in
	red)    C=RrR;;
	green)  C=GgG;;
	yellow) C=YyY;;
	blue)   C=BbB;;
	cyan)   C=CcC;;
	magenta) C=MmM;;
	grey|gray) C=wNW;;
	tricolora) C=RBW;;
	marley) C=RYG;; # Bob Marley style :-) have a smoke and imagine...
	*)	C=$1;; # any 3/4 colors
	esac
	# decode colors and prompt strings
	[ ${#C} = 3 ] && C=D${C}L || C=${C}L
	for I in {0..4};do
		eval "CI=\$_C${C:$I:1}"
		if [ -z "$CI" ]; then
			echo "Wrong color code '${C:$I:1}' in $1" && CI=$_CN
			echo "Choose predefined scheme:$_CL"
			declare -f _cleclr|sed -n 's/^[ \t]*(*\(\<[a-z |]*\)).*/ \1/p'|tr -d '\n|'
			printf "\n${_CN}Alternatively create your own 3+letter combo using rgbcmykw/RGBCMYKW\n"
			printf "E.g.:$_CL cle color rgB\n"
			return 1
		fi
		eval "_C$I=\$CI"
	done
	[ ${C:0:1} = D ] && _C0=$_C1$_CD
}

# CLE prompt escapes
_clesc () (
	EXTESC="
	 -e 's/\^i/\$CLE_IP/g'
	 -e 's/\^h/\$CLE_SHN/g'
	 -e 's/\^H/\$CLE_FHN/g'
	 -e 's/\^U/\$CLE_USER/g'
	 -e 's/\^g/\$(gitwb)/g'
	 -e 's/\^?/\$_EC/g'
	 -e 's/\^[E]/\\$_PE\$_CE\\$_Pe\[\$_EC\]\\$_PE\$_CN\$_C0\\$_Pe/g'
	 -e 's/\^[C]\(.\)/\\$_PE\\\$_C\1\\$_Pe/g'
	 -e 's/\^v\([[:alnum:]_]*\)/\1=\$\1/g'
	 -e 's/\^\^/\^/g'
	"
	[ $ZSH_NAME ] && SHESC="-e 's/\\\\n/\$_PN/g'
	 -e 's/\\^[$%#]/%#/g'
	 -e 's/\\\\d/%D{%a %b %d}/g'
	 -e 's/\\\\D/%D/g'
	 -e 's/\\\\h/%m/g'
	 -e 's/\\\\H/%M/g'
	 -e 's/\\\\j/%j/g'
	 -e 's/\\\\l/%l/g'
	 -e 's/\\\\s/zsh/g'
	 -e 's/\\\\t/%*/g'
	 -e 's/\\\\T/%D{%r}/g'
	 -e 's/\\\\@/%@/g'
	 -e 's/\\\\A/%T/g'
	 -e 's/\\\\u/%n/g'
	 -e 's/\\\\w/%$PROMPT_DIRTRIM~/g'
	 -e 's/\\\\W/%1~/g'
	 -e 's/\\\\!/%!/g'
	 -e 's/\\\\#/%i/g'
	 -e 's/\\\\\[/%{/g'
	 -e 's/\\\\\]/%}/g'
	 -e 's/\\\\\\\\/\\\\/g'
	" || SHESC="-e 's/\^[$%#]/\\\\\$/g'"
	SUBS=`tr -d '\n\t' <<<$SHESC$EXTESC`
	eval sed "$SUBS" <<<"$*"
)

_cle_r () {
	[ "$1" != h ] && return
	printf "\n$_Cr     ,==~~-~w^, \n    /#=-.,#####\\ \n .,!. ##########!\n((###,. \`\"#######;."
	printf "\n &######\`..#####;^###)\n$_CW   (@@$_Cr^#############\"\n$_CW"
	printf "    \\@@@\\__,-~-__,\n     \`&@@@@@69@@/\n        ^&@@@@&*\n$_CN\n"
}

# override default prompt strings with configured values
_clepcp () {
	local I
	for I in 0 1 2 3 T; do
		eval "CLE_P$I=\${CLE_PB$I:-\$CLE_P$I}"
		[ $ZSH_NAME ] && eval "CLE_P$I=\${CLE_PZ$I:-\$CLE_P$I}"
		[ $1 ] && unset CLE_P{B,Z}$I
	done
}

# craft the prompt from defined strings
_cleps () {
	[ "$CLE_PT" ] && PS1="$_PE\${_CT}$(_clesc $CLE_PT)\${_Ct}$_Pe" || PS1=''
	PS1=$PS1`_clesc "^C0$CLE_P0^C1$CLE_P1^C2$CLE_P2^C3$CLE_P3^CN^C4"`
	PS2=`_clesc "^C3>>> ^CN^C4"`
}

# default prompt strings and colors
_cledefp () {
	CLE_P0='^E \t '
	CLE_P1='\u '
	CLE_P2='^h '
	CLE_P3='\w ^$ '
	CLE_PT='\u@^H'
	case "$USER-${CLE_WS#$CLE_FHN}" in
	root-)	_DC=red;;
	*-)	_DC=marley;;
	root-*)	_DC=RbB;;
	*-*)	_DC=blue;;
	esac
}

# save configuration
_clesave () (
	echo "# $CLE_VER"
	vdump "CLE_CLR|CLE_PB.|CLE_PZ."
) >$CLE_CF


# prompt callback functions
_PST='${PIPESTATUS[@]}'
[ $ZSH_NAME ] && _PST='${pipestatus[@]}'
[ "$BASH_VERSINFO" = 3 ] && _PST='$?'
precmd () {
	eval "_EC=$_PST"
	[[ $_EC =~ [1-9] ]] || _EC=0
	local IFS S DT C
	unset IFS
	if [ $BASH ]; then
		C=$_HN
		history -a
	else
		C=`fc -lt ";$CLE_HTF;" -1`
		C=${C#*;}
	fi
	DT=${C/;*}
	C=${C/$DT;}
	C="${C#"${C%%[![:space:]]*}"}"
	if [[ $C =~ ^\# ]]; then
		_clerh '#' "$PWD" "$C"	# record a note to history
	elif [ $_HT ]; then	# check timer - indicator of executed command
		S=$((SECONDS-${_HT:-$SECONDS}))
		_clerh "$DT" $S "$_EC" "$PWD" "$C"
		[ "$_EC" = 0 ] && _CE="" || _CE="$_Ce"
		_HT=
	else
		_CE=''
		_EC=0
	fi
	[ $BASH ] && trap _clepreex DEBUG
}

# run this function before the issued command
preexec () {
	_HT=$SECONDS
}

CLE_HTF='%F %T'
HISTTIMEFORMAT=${HISTTIMEFORMAT:-$CLE_HTF }

# Bash hack
if [ $BASH ]; then
	history -cr $HISTFILE
	_HP=`HISTTIMEFORMAT=";$CLE_HTF;" history 1`
	_HP=${_HP#*;}
_clepreex () {
	_HN=`HISTTIMEFORMAT=";$CLE_HTF;" history 1`
	_HN=${_HN#*;}
	echo -n $_CN
	[ "$_HP" = "$_HN" ] && return
	_HP=$_HN
	trap "" DEBUG
	preexec "$BASH_COMMAND"
}
fi

# rich history record
_clerh () {
	local DT RC REX ID V VD W
	case $# in
	3)	DT=`date "+$CLE_HTF"`;SC='';;
	4)	DT=`date "+$CLE_HTF"`;SC=$1;shift;;
	5)	DT=$1;SC=$2;shift 2;;
	esac
	REX="^cd\ |^cd$|^-$|^\.\.$|^\.\.\.$|^aa$|^lscreen|^h$|^hh$|^hh\ "
	[[ $3 =~ $REX ]] && return
	W=${2/$HOME/\~}
	ID="$DT;$CLE_USER-$$"
	REX='^\$[A-Za-z0-9_]+'
	case "$3" in
	echo*)
		echo -E "$ID;$SC;$1;$W;$3"
		for V in $3; do
			if [[ $V =~ $REX ]]; then
				V=${V/\$/}
				VD=`vdump $V`
				echo -E "$ID;;$;;${VD:-unset $V}"
			fi
		done;;
	xx) # directory bookmark
		echo -E "$ID;;*;$W;" ;;
	\#*)
		echo -E "$ID;;#;$W;$3" ;;
	*)
		echo -E "$ID;$SC;$1;$W;$3" ;;
	esac
} >>$CLE_HIST


# Run profile files
if [ -n "$CLE_PROF" ]; then
	_clexe /etc/profile
	_clexe $HOME/.${CLE_SH}rc
	unset CLE_PROF
fi

# print MOTD + more
if [ "$CLE_MOTD" ]; then
	[ -f /etc/motd ] && cat /etc/motd
	printf "\n$CLE_MOTD"
	printb "\n CLE/$CLE_SH $CLE_VER\n"
	unset CLE_MOTD
fi

# read inherited environment
[ $CLE_WS ] && _clexe $CLE_ENV

# colorize LS
case $OSTYPE in
linux*)		alias ls='ls --color=auto';;
darwin*)	export CLICOLOR=1; export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd;;
FreeBSD*)       alias ls='ls -G "$@"';;
*)		alias ls='ls -F';; # at least some file type indication
esac

# colorized GREP except on busybox
if [ -L `command which grep` ];then
	unalias grep egrep fgrep xzgrep xzegrep xzfgrep zgrep zegrep zfgrep 2>/dev/null
else
	alias grep='grep --color=auto'
fi

# Remove alias 'which' if there is no version supporting extended options
{ alias|command which -i which || unalias which; } >/dev/null 2>&1

## ** cd command enhancements **
## `.. ...`     - up one or two levels
## `-`  (dash)  - cd to recent dir
- () { cd - >/dev/null; vdump OLDPWD;}
.. () { cd ..;}
... () { cd ../..;}
## `xx` & `cx`   - bookmark $PWD & use later
xx () { _XX=$PWD; echo path bookmark: $_XX; }
cx () { cd $_XX; }

##
## ** Alias management **
aa () {
	local ATMP=$CLE_AL.tmp
	local Z=${ZSH_NAME:+-L}
	case "$1" in
	"")	## `aa`         - show aliases
		builtin alias $Z|sed "s/^alias \([^=]*\)=\(.*\)/$_CL\1$_CN	\2/";;
	-s)	## `aa -s`      - save aliases
		if [ $CLE_WS ]; then
			grep "^alias " $CLE_ENV >$ATMP
			builtin alias $Z | diff - $ATMP | sed -n 's/^< \(.*\)/\1/p' >$CLE_AL
			rm -f $ATMP
		else
			builtin alias $Z >$CLE_AL
		fi;;
	-e)	## `aa -e`      - edit aliases
		builtin alias $Z >$ATMP
		vi $ATMP
		[ $ZSH_NAME ] && builtin unalias -m '*' || builtin unalias -a
		. $ATMP
		rm -f $ATMP;;
	*=*)	## `aa a='b'`   - create new alias and save
		builtin alias "$*"
		aa -s;;
	*)	builtin alias "$*";;
	esac
}


##
## ** History tools **
## `h`               - shell 'history' wrapper
h () (
	([ $BASH ] && HISTTIMEFORMAT=";$CLE_HTF;" history "$@" || fc -lt ";$CLE_HTF;" "$@")|( IFS=';'; while read -r N DT C;do
		echo -E "$_CB$N$_Cb $DT $_CN$_CL$C$_CN"
	done;) 
)

if [ $BASH ]; then
# init rich history buffer and shortcut keys
bind -x '"\ek": "_clerhup"'
bind -x '"\ej": "_clerhdown"'
bind -x '"\eh": "hh -b $READLINE_LINE"'
bind -x '"\el": "_clerhbuf"'
fi

## `hh [opt] [srch]` - query the rich history
_RHI=1
_RHLEN=0
hh () {
	local O S N OPTIND MOD OUT
	while getopts "a:mtwsncflbex0123456789" O; do
		case $O in
		a)	## `hh -a string`    - search for any string in history
			S=$S"&&/${OPTARG//\//\\/}/" ;;
		m)	## `hh -m`           - my commands, exclude other users
			S=$S"&& \$2~/$CLE_USER/";;
		[0-9])	## `hh -0..9`        - 0: today's commands, 1: yesterday's, etc.
			S=$S"&& \$1~/$(date -d -${O}days '+%F')/";;
		t)	## `hh -t`           - commands from current session
			S=$S"&& \$2==\"$CLE_USER-$$\"";;
		w)	## `hh -w`           - search for commands issued from current working directory`
			N=${PWD/$HOME/\~}
			S=$S"&& \$5==\"$N\"";;
		s)	## `hh -s`           - select successful commands only
			S=$S"&& \$4==0";;
		n)	## `hh -n`           - narrow output, hide time and session id
			MOD=n;;
		c)	## `hh -c`           - show only commands
			MOD=c;;
		f) 	## `hh -f`           - show working folder history
			MOD=f;;
		b)	## `hh -b`           - show unique commands in buffer
			OUT='>/dev/null';;
		l)	## `hh -l`           - display using 'less'
			OUT='|less -r +G';;
		e)	## `hh -e`           - edit the rich history file
			vi + $CLE_HIST
			return;;
		x)	## `hh -x`           - remove the most recent history record
			# TODO: maybe some args, numbers, etc
			sed -i '$ d' $CLE_HIST
			[ $BASH ] && history -d -2
			return;;
		*)	cle help hh;return
		esac
	done

	_RHARG=$*
	shift $((OPTIND-1))

	N=+1
	if [ $* ]; then
		[[ $* =~ ^[0-9]+$ ]] && N=$* || S=$S"&& \$4~/[0..9 ]/ &&/.+;.+;.*;.*;.*;.*${*//\//\\/}/"
	else
		[ "$S" ] || N=100
	fi

	local AW='BEGIN { FS=";" }
	//'$S' {
		CST=CE; CFL=CN; CCM=CL
		if($4=="0") { CST=CO; CFL=CN; CCM=CL }
		if($4=="#") { CST=CH; CFL=CH; CCM=CH }
		if($4=="@") { CST=CS; CFL=CS; CCM=CS }
		CMD=substr($0,index($0,$6))
		if(MOD~"n") {
			FORM=CST " %-9s" CFL " %-20s:" CCM " %s\n" CN
			printf FORM,$4,$5,CMD
		}
		else if(MOD~"c") print CMD
		else if(MOD~"f") CMD=$5
		else {
			FORM=CD "%s" CS " %-13s" CD " %5s" CST " %-5s" CFL " %-10s:" CCM " %s\n" CN
			printf FORM,$1,$2,$3,$4,$5,CMD
		}
		if( $4~/^[0-9 ]+$/ ) CMDS[I++]=CMD
	}
	END {
		UNIQ="\n"
		while(I-- && N<100 ) {
			C=CMDS[I] "\n"
			if( ! index(UNIQ,"\n" C) ) { UNIQ=UNIQ C; N++ }
		}
		print UNIQ >TREV
	}'

	local TREV=`mktemp /tmp/clerh.XXXX`
	eval tail -n $N $CLE_HIST \| awk -v CN='$_CN' -v CL='$_CL' -v CD='$_CB' -v CS='$_Cb' -v CO='$_Cg' -v CE='$_Cr' -v CH='$_Cy' -v MOD='$MOD' -v TREV=$TREV '"$AW"' $OUT

	_RHBUF=()
	_RHLEN=0
	_RHI=0
	while read S; do
		[ -n "$S" ] && _RHBUF[$((++_RHLEN))]=$S
	done <$TREV
	rm -f $TREV
	[ "$OUT" = '>/dev/null' -o "$MOD" = f ] && _clerhbuf
}

# rich history up/down shortcut routines
_clerhdown () {
	[[ $READLINE_LINE =~ ^[0-9]+$ ]] && _RHI=$READLINE_LINE || ((_RHI--))
	[ $_RHI -lt 0 ] && _RHI=0
	READLINE_LINE=${_RHBUF[$_RHI]}
	READLINE_POINT=${#READLINE_LINE}
}

_clerhup () {
	[[ $READLINE_LINE =~ ^[0-9]+$ ]] && _RHI=$READLINE_LINE || ((_RHI++))
	[ $_RHI -gt $_RHLEN ] && _RHI=$_RHLEN
	READLINE_LINE=${_RHBUF[$_RHI]}
	READLINE_POINT=${#READLINE_LINE}
}

_clerhbuf () {
	local A N=$_RHLEN
	while [ $N -ge 1 ]; do
		[ $N -eq $_RHI ] && A='*' || A=' '
		printf "$_CN$_CB$A%6d: $_CN$_C4%s\n" $N "${_RHBUF[$N]}"
		((N--))
	done
	echo "$_CN$_C3 $_RHLEN records, search:$_CN$_C4 'hh $_RHARG'"
}

# zsh hack to accept notes on cmdline
[ $ZSH_NAME ] && '#' () { true; }

##
## ** Not-just-internal tools **
## `gitwb`           - show current working branch name
gitwb () (
	# go down the folder tree and look for .git
	while [ "$PWD" != / ]; do
		[ -d .git ] && { git symbolic-ref --short HEAD; return; }
		cd ..
	done
	return 1  # not in git repository
)


## `mdfilter`        - markdown acsii highlighter
mdfilter () {
	sed -e "s/^###\(.*\)/$_CL\1$_CN/"\
	 -e "s/^##\( *\)\(.*\)/\1$_CU$_CL\2$_CN/"\
	 -e "s/^#\( *\)\(.*\)/\1$_CL$_CV \2 $_CN/"\
	 -e "s/\*\*\(.*\)\*\*/$_CL\1$_CN/"\
	 -e "s/\<_\(.*\)_\>/$_CU\1$_Cu/g"\
	 -e "s/\`\`\`/$_CD~~~~~~~~~~~~~~~~~$_CN/"\
	 -e "s/\`\([^\`]*\)\`/$_Cg\1$_CN/g"
}

## `vdump 'regexp'`  - dump variables in reusable way
vdump () (
	typeset 2>/dev/null | awk '/.* \(\)/{exit} /(^'$1')=/{gsub(/\\C-\[/,"\\E");print}'
)


##
## ** Live session wrappers **

# Environment packer
CLE_XFILES=
_clepak () {
        RH=${CLE_DR/\/.*/}
        RD=${CLE_DR/$RH\//}


        pushd . >/dev/null
        if [ $CLE_WS ]; then
                cd $RH
                RC=${CLE_RC/$RH\//}
                TW=${CLE_TW/$RH\//}
                EN=${CLE_ENV/$RH\//}
        else
                RH=/var/tmp/$USER
                mkdir -m 0755 -p $RH/$RD 2>/dev/null && cd $RH || cd
                EN=$RD/env-$CLE_FHN
		XF=$EN
		for F in $CLE_XFILES tw rc; do
			RC=$RD/$F-$CLE_FHN
			cp $CLE_DR/$F $RC 2>/dev/null && XF="$XF $RC"
		done

                echo "# evironment $CLE_USER@$CLE_FHN" >$EN
                vdump "CLE_P..|^_C." >>$EN
                vdump "$CLE_XVARS" >>$EN
                cat $CLE_AL >>$EN 2>/dev/null
                for XFUN in $CLE_XFUN; do
                        declare -f $XFUN >>$EN
                done
        fi
        [ $1 ] && C64=`eval tar chzf - $XF 2>/dev/null | base64 | tr -d '\n\r '`
	popd >/dev/null
}

## `lssh [usr@]host`   - access remote system and take CLE along
lssh () (
	[ "$1" ] || { cle help lssh;return 1;}
	_clepak tar
	command ssh -t $* "
		H=/var/tmp/\$USER; mkdir -m 755 -p \$H; cd \$H
		[ \"\$OSTYPE\" = darwin ] && D=D || D=d
		echo $C64|base64 -\$D|tar xzmf -
		exec \$H/$RC -m $CLE_ARG"
)

## `lsudo [user]`      - sudo wrapper; root is the default account
lsudo () (
	_clepak
        sudo -i -u ${1:-root} $RH/$RC $CLE_ARG
)

## `lsu [user]`        - su wrapper
lsu () (
        _clepak
	S=
        [[ $OSTYPE =~ [Ll]inux ]] && S="-s /bin/sh"
        eval su $S -l ${1:-root} $RH/$RC
)

## `lksu [user]`       - ksu wrapper
lksu () (
	_clepak
        ksu ${1:-root} -a -c "cd;$RH/$RC"
)



[ $ZSH_NAME ] && setopt +o NOMATCH

# record this startup into rich history
_clerh @ $CLE_TTY "[${STY:-${CLE_WS:-WS}},$CLE_SH]"
[ $CLE_DEBUG ] && _clerh @ $PWD "$CLE_RC [$CLE_VER]"

_clexe $HOME/.cle-local
_clexe $CLE_AL
_clexe $CLE_TW
for M in $CLE_D/mod-*; do
	_clexe $M
done

[[ -d $HOME/bin && ! $PATH =~ $HOME/bin ]] && PATH=$PATH:$HOME/bin

# create the prompt in several steps
# 1. default prompt strings
_cledefp

# 2. override with inherited strings
[ $CLE_WS ] && _clepcp x

# 3. create color table if necessary
[ "$TERM" != "$_C_" -o -z "$_CN" ] && _cletable

# 4. get values from config file
_clexe $CLE_CF
_clepcp

# 5. terminal specific

case $TERM in
linux)	 CLE_PT='';;	# no tits on console
screen*) CLE_PT='\u'
	printf "\e]0; screen: $CLE_USER@$CLE_FHN$_Ct\007"
	_CT=$'\ek'; _Ct=$'\e\\';;
*)	_CT=$'\e]0;'; _Ct=$'\007';;
esac

# 6. shell specific
if [ $BASH ]; then
	shopt -s checkwinsize
	_PE='\['; _Pe='\]'
else
	setopt PROMPT_SUBST SH_WORD_SPLIT
	_PE='%{'; _Pe='%}'
	_PN=$'\n' # zsh doesn't know '\n' as escape sequence! WTF?
fi

# 7. craft the prompt string
_cleps
_cleclr ${CLE_CLR:-$_DC}

PROMPT_COMMAND=precmd

# completions
_clecomp () {
	local A=(color p0 p1 p2 p3 cf mod env update reload doc help)
	local C
	COMPREPLY=()
	case $3 in
	p0) COMPREPLY="'$CLE_P0'";;
	p1) COMPREPLY="'$CLE_P1'";;
	p2) COMPREPLY="'$CLE_P2'";;
	p3) COMPREPLY="'$CLE_P3'";;
	#'') COMPREPLY=$A;;
	esac
	[ "$3" != "$1" ] && return
	for C in ${A[@]}; do
		[[ $C =~ ^$2 ]] && COMPREPLY+=($C)
	done
}

if [ $BASH ]; then
	# lssh completion
	declare -F _known_hosts >/dev/null && complete -F _known_hosts lssh
	_N=/usr/share/bash-completion
	[ -d $_N ] && . $_N/bash_completion && . $_N/completions/ssh && complete -F _ssh lssh
else
	# ZSH completions
	autoload compinit && compinit
	autoload bashcompinit && bashcompinit
	compdef lssh=ssh
fi
complete -F _clecomp cle

# redefine alias builtins
alias () {
	if [ -n "$1" ]; then
		aa "$@"
	else
		builtin alias
	fi
}

unalias () {
	[ "$1" = -a ] && cp $CLE_AL $CLE_AL.bk  # BASH only!
	builtin unalias "$@"
	aa -s
}

# check manual/initial run
[ $CLE_1 ] && cat <<EOT
 It seems you started CLE running '$CLE_1' from command line
 Since this is the first run, consider setup in your profile.
 Run following command to hook CLE into your $HOME/.${CLE_SH}rc:
$_CL    cle deploy
EOT

[ -r . ] || cd

##
## ** CLE command & control **
cle () {
	local C I P S N
	C=$1;shift
	if declare -f _cle_$C >/dev/null;then
		_cle_$C $*
		return $?
	elif [ -f $CLE_D/cle-$C ]; then
		. $CLE_D/cle-$C $*
		return $?
	fi
	case $C in
	color)  ## `cle color COLOR`       - set prompt color
		[ $1 ]  && _cleclr $1 && CLE_CLR=$1 && _clesave;;
	p?)	## `cle p0-p3 [str]`       - show/define prompt parts
		I=${C:1:1}
		if [ "$1" ]; then
			P=B; [[ $* =~ % && -n "$ZSH_NAME" ]] && P=Z || unset CLE_PZ$I
			S=$*
			eval "[ \"\$S\" != \"\$CLE_P$I\" ] && { CLE_P$P$I='$*';_clepcp;_cleps;_clesave; }" || :
		else
			vdump CLE_P$I
		fi;;
	title)	## `cle title off|string`  - turn off window title or set the string
		case "$1" in
		off)	CLE_PT='';;
		'')	_clepcp;;
		*)	cle pT "$*";;
		esac
		_cleps;;
	cf)	## `cle cf [ed|reset|rev]` - view/edit/reset/revert configuration
		case "$1" in
		ed)	vi $CLE_CF  && . $CLE_RC;;
		reset)	mv -f $CLE_CF $CLE_CF-bk;;
		rev)	cp $CLE_CF-bk $CLE_CF;;
		"")
			if [ -f $CLE_CF ]; then
				printb $_CU$CLE_CF:
				cat $CLE_CF
			else
				echo Default/Inherited configuration
			fi
			return;;
		esac
		cle reload;;
	deploy) ## `cle deploy`            - hook CLE into user's profile
		P=$HOME/.cle-$USER
		mkdir -p $P
		cp $CLE_RC $P/rc
		CLE_RC=$P/rc
		unset CLE_1
		I='# Command Live Environment'
		S=$HOME/.${SHELL##*/}rc
		grep -A1 "$I" $S && printb CLE is already hooked in $S && return 1
		ask "Do you want to add CLE to $S?" || return
		echo -e "\n$I\n[ -f $CLE_RC ] && . $CLE_RC\n" | tee -a $S
		cle reload;;
	update) ## `cle update [master]`   - install fresh version of CLE
		P=$CLE_D/rc.new
		curl -k ${CLE_SRC/CLE_REL/${1:-CLE_REL}}/clerc >$P
		S=`sed -n 's/^#\* version: //p' $P`
		[ "$S" ] || { echo "Download error"; return 1; }
		echo current: $CLE_VER
		echo "new:     $S"
		I=`diff $CLE_RC $P` && { echo No difference; return 1;}
		ask Do you want to see diff? && cat <<<"$I"
		ask Do you want to install new version? || return
		B=$CLE_D/rc.bk
		cp $CLE_RC $B
		chmod 755 $P
		mv -f $P $CLE_RC
		cle reload;;
	reload) ## `cle reload [bash|zsh]` - reload CLE
		[[ $1 =~ ^[bz] ]] && S=-$1
		[ $S ] && exec $CLE_RC $S
		unset CLE_EXE
		. $CLE_RC
		echo CLE $CLE_VER;;
	mod)    ## `cle mod`               - cle module management
		ask Activate CLE modules? || return
		N=cle-mod
		P=$CLE_D/$N
		curl -k $CLE_SRC/modules/$N >$P
		grep -q "# .* $N:" $P || { printb Module download failed; rm -f $P; return 1;}
		cle mod "$@";;
	env)	## `cle env`               - inspect variables
		vdump 'CLE.*'|awk -F= "{printf \"$_CL%-12s$_CN%s\n\",\$1,\$2}";;
	help|-h|--help) ## `cle help [fnc]`        - show help
		P=`ls $CLE_D/cle-* 2>/dev/null`
		awk -F# "/\s##\s*.*$@|^##\s*.*$@/ { print \$3 }" ${CLE_EXE//:/ } $P | mdfilter | less -erFX;;
	doc)	## `cle doc`               - show documentation
		I=`curl -sk $CLE_SRC/doc/index.md`
		[[ $I =~ LICENSE ]] || { echo Unable to get documentation;return 1;}
		PS3="$_CL doc # $_CN"
		select N in $I;do
			[ $N ] && curl -sk $CLE_SRC/doc/$N |mdfilter|less -r; break
		done;;
	"")
		_clebnr
		sed -n 's/^#\*\(.*\)/\1/p' $CLE_RC
		;;
	*)	echo unimplemented function: cle $C;
		echo check cle help;
		return 1
		;;
	esac
}

unset _T _H _C _N _DC

# that's all, folks...

